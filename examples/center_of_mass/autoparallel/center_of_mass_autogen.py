#!/usr/bin/python

# -*- coding: utf-8 -*-

# For better print formatting
from __future__ import print_function

# Imports
from custom_value import Value

# Task imports
from pycompss.api.parallel import parallel
from pycompss.api.api import compss_wait_on


###########################################################
# MAIN WORKFLOW FUNCTION
###########################################################

# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *


@task(var2=IN, var1=INOUT)
def S1(var2, var1):
    var1 += var2


@task(var2=IN, var3=IN, var1=INOUT)
def S2(var2, var3, var1):
    var1 += var2 * var3


@task(var2=IN, var3=IN, var1=INOUT)
def S3(var2, var3, var1):
    var1 /= var3 if var2 != Value(0) else Value(0)


@task(var1=IN, system_mass=INOUT)
def S4(var1, system_mass):
    system_mass += var1


@task(var2=IN, var3=IN, var1=INOUT)
def S5(var2, var3, var1):
    var1 += var2 * var3


@task(system_mass=IN, var1=INOUT)
def S6(system_mass, var1):
    var1 /= system_mass if system_mass != Value(0) else Value(0)


def calculate_cm(num_objects, num_parts, num_dims, system_objects, masses):
    system_objects_cms_position = [[Value(0) for _ in range(num_dims)] for _ in range(num_objects)]
    system_objects_mass = [Value(0) for _ in range(num_objects)]
    if num_objects >= 1:
        if num_dims >= 1 and num_parts >= 1:
            lbp = 0
            ubp = num_dims + num_parts - 2
            for t2 in range(0, num_dims + num_parts - 2 + 1):
                lbp = max(0, t2 - num_parts + 1)
                ubp = min(t2, num_dims - 1)
                for t3 in range(lbp, ubp + 1):
                    lbv = 0
                    ubv = num_objects - 1
                    for t4 in range(lbv, ubv + 1):
                        S2(masses[system_objects[t4][t2 - t3][0]], system_objects[t4][t2 - t3][1][t3],
                            system_objects_cms_position[t4][t3])
        if num_dims >= num_parts + 1:
            lbp = 0
            ubp = num_parts - 1
            for t2 in range(0, num_parts - 1 + 1):
                lbp = 0
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims <= num_parts - 1:
            lbp = 0
            ubp = num_dims - 1
            for t2 in range(0, num_dims - 1 + 1):
                lbp = 0
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims >= 1 and num_dims == num_parts:
            lbp = 0
            ubp = num_dims + num_objects - 2
            for t2 in range(0, num_dims + num_objects - 2 + 1):
                lbp = max(0, t2 - num_dims + 1)
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims >= 1 and num_dims <= num_parts - 1:
            lbp = num_dims
            ubp = num_dims + num_objects - 2
            for t2 in range(num_dims, num_dims + num_objects - 2 + 1):
                lbp = max(0, t2 - num_parts + 1)
                ubp = t2 - num_dims
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                lbp = t2 - num_dims + 1
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims >= num_parts + 1 and num_parts >= 1:
            lbp = num_parts
            ubp = num_objects + num_parts - 2
            for t2 in range(num_parts, num_objects + num_parts - 2 + 1):
                lbp = max(0, t2 - num_dims + 1)
                ubp = t2 - num_parts
                for t3 in range(lbp, ubp + 1):
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
                lbp = t2 - num_parts + 1
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims >= 1:
            lbp = num_dims + num_objects - 1
            ubp = num_objects + num_parts - 2
            for t2 in range(num_dims + num_objects - 1, num_objects + num_parts - 2 + 1):
                lbp = max(0, t2 - num_parts + 1)
                ubp = num_objects - 1
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
        if num_dims <= 0 and num_parts >= 1:
            lbp = 0
            ubp = num_objects + num_parts - 2
            for t2 in range(0, num_objects + num_parts - 2 + 1):
                lbp = max(0, t2 - num_parts + 1)
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S1(masses[system_objects[t3][t2 - t3][0]], system_objects_mass[t3])
        if num_parts >= 1:
            lbp = num_objects + num_parts - 1
            ubp = num_dims + num_objects - 2
            for t2 in range(num_objects + num_parts - 1, num_dims + num_objects - 2 + 1):
                lbp = max(0, t2 - num_dims + 1)
                ubp = num_objects - 1
                for t3 in range(lbp, ubp + 1):
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
        if num_dims >= 1 and num_parts <= 0:
            lbp = 0
            ubp = num_dims + num_objects - 2
            for t2 in range(0, num_dims + num_objects - 2 + 1):
                lbp = max(0, t2 - num_dims + 1)
                ubp = min(t2, num_objects - 1)
                for t3 in range(lbp, ubp + 1):
                    S3(system_objects_mass[t3], system_objects_mass[t3], system_objects_cms_position[t3][t2 - t3])
    compss_barrier()
    system_mass = Value(0)
    system_cm = [Value(0) for _ in range(num_dims)]
    if num_objects >= 1:
        if num_objects >= 2:
            lbp = 0
            ubp = min(num_dims - 1, num_objects - 1)
            for t1 in range(lbp, ubp + 1):
                S4(system_objects_mass[t1], system_mass)
                S5(system_objects_mass[0], system_objects_cms_position[0][t1], system_cm[t1])
                lbp = 1
                ubp = num_objects - 1
                for t2 in range(1, num_objects - 1 + 1):
                    S5(system_objects_mass[t2], system_objects_cms_position[t2][t1], system_cm[t1])
        if num_dims >= 1 and num_objects == 1:
            S4(system_objects_mass[0], system_mass)
            S5(system_objects_mass[0], system_objects_cms_position[0][0], system_cm[0])
        lbp = max(0, num_dims)
        ubp = num_objects - 1
        for t1 in range(lbp, ubp + 1):
            S4(system_objects_mass[t1], system_mass)
        lbp = num_objects
        ubp = num_dims - 1
        for t1 in range(lbp, ubp + 1):
            lbp = 0
            ubp = num_objects - 1
            for t2 in range(0, num_objects - 1 + 1):
                S5(system_objects_mass[t2], system_objects_cms_position[t2][t1], system_cm[t1])
    compss_barrier()
    if num_dims >= 1:
        lbp = 0
        ubp = num_dims - 1
        for t1 in range(lbp, ubp + 1):
            S6(system_mass, system_cm[t1])
    compss_barrier()
    system_cm = compss_wait_on(system_cm)
    if __debug__:
        system_mass = compss_wait_on(system_mass)
        print('SYS MASS: ' + str(system_mass))
        print('SYS CM: ' + str(system_cm))
    return system_cm

# [COMPSs Autoparallel] End Autogenerated code


###########################################################
# MAIN
###########################################################

def main():
    # Define system
    num_objects = 3
    num_parts = 4
    num_dims = 2

    system_objects = [[("pata", [Value(0), Value(0)]),
                       ("pata", [Value(2), Value(0)]),
                       ("pata", [Value(2), Value(2)]),
                       ("tablero", [Value(1), Value(1)])],
                      [("pata", [Value(3), Value(1)]),
                       ("pata", [Value(3), Value(2)]),
                       ("sillin", [Value(3), Value(1)]),
                       ("respaldo", [Value(3), Value(2)])],
                      [("reposapies", [Value(3), Value(3)]),
                       ("pata", [Value(3), Value(1)]),
                       ("pata", [Value(3), Value(2)]),
                       ("sillin", [Value(3), Value(1)])]
                      ]
    masses = {"pata": Value(2),
              "tablero": Value(5),
              "sillin": Value(3),
              "respaldo": Value(4),
              "reposapies": Value(1)}

    # Calculate CM
    system_cm = calculate_cm(num_objects, num_parts, num_dims, system_objects, masses)

    # Print result
    print("System CM: " + str(system_cm))


###########################################################
# ENTRY POINT
###########################################################

if __name__ == "__main__":
    main()
