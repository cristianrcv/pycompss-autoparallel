#!/usr/bin/python

# -*- coding: utf-8 -*-

# For better print formatting
from __future__ import print_function

# Imports
from pycompss.api.parallel import parallel
from pycompss.api.constraint import constraint
from pycompss.api.task import task
from pycompss.api.api import compss_barrier
from pycompss.api.api import compss_wait_on


############################################
# MATRIX GENERATION
############################################

def initialize_variables(n_size):
    a = create_matrix(n_size)

    return a


def create_matrix(n_size):
    mat = []
    for i in range(n_size):
        mat.append([])
        for j in range(n_size):
            mb = create_block(i, j)
            mat[i].append(mb)

    return mat


@constraint(ComputingUnits="${ComputingUnits}")
@task(returns=1)
def create_block(i, j):
    return float(i * i + j * j)


############################################
# MAIN FUNCTION
############################################

# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *


@task(var2=IN, var3=IN, var4=IN, var5=IN, var6=IN, var7=IN, var8=IN, var9=IN, var10=IN, returns=1)
def S1(var2, var3, var4, var5, var6, var7, var8, var9, var10):
    return compute_distance(var2, var3, var4, var5, var6, var7, var8, var9,
        var10)


def seidel(a, n_size, t_size):
    if __debug__:
        print('Matrix A:')
        print(a)
    if n_size >= 3 and t_size >= 1:
        lbp = 1
        ubp = n_size + 2 * t_size - 4
        for t1 in range(1, n_size + 2 * t_size - 4 + 1):
            lbp = max(int(math.ceil(float(t1 + 1) / float(2))), t1 - t_size + 1
                )
            ubp = min(int(math.floor(float(t1 + n_size - 2) / float(2))), t1)
            for t2 in range(lbp, ubp + 1):
                lbp = t1 + 1
                ubp = t1 + n_size - 2
                for t3 in range(t1 + 1, t1 + n_size - 2 + 1):
                    a[-t1 + 2 * t2][-t1 + t3] = S1(a[-t1 + 2 * t2 - 1][-t1 +
                        t3 - 1], a[-t1 + 2 * t2 - 1][-t1 + t3], a[-t1 + 2 *
                        t2 - 1][-t1 + t3 + 1], a[-t1 + 2 * t2][-t1 + t3 - 1
                        ], a[-t1 + 2 * t2][-t1 + t3], a[-t1 + 2 * t2][-t1 +
                        t3 + 1], a[-t1 + 2 * t2 + 1][-t1 + t3 - 1], a[-t1 +
                        2 * t2 + 1][-t1 + t3], a[-t1 + 2 * t2 + 1][-t1 + t3 +
                        1])
    compss_barrier()
    if __debug__:
        print('New Matrix A:')
        a = compss_wait_on(a)
        print(a)

# [COMPSs Autoparallel] End Autogenerated code


############################################
# MATHEMATICAL FUNCTIONS
############################################

def compute_distance(a_tl, a_tc, a_tr, a_cl, a_cc, a_cr, a_bl, a_bc, a_br):
    # import time
    # start = time.time()

    return (float(a_tl + a_tc + a_tr + a_cl + a_cc + a_cr + a_bl + a_bc + a_br)) / float(9)

    # end = time.time()
    # tm = end - start
    # print "TIME: " + str(tm*1000) + " ms"


############################################
# MAIN
############################################

if __name__ == "__main__":
    # Import libraries
    import time

    # Parse arguments
    import sys

    args = sys.argv[1:]
    NSIZE = int(args[0])
    TSIZE = int(args[1])

    # Log arguments if required
    if __debug__:
        print("Running seidel application with:")
        print(" - NSIZE = " + str(NSIZE))
        print(" - TSIZE = " + str(TSIZE))

    # Initialize matrices
    if __debug__:
        print("Initializing matrices")
    start_time = time.time()
    A = initialize_variables(NSIZE)
    compss_barrier()

    # Begin computation
    if __debug__:
        print("Performing computation")
    seidel_start_time = time.time()
    seidel(A, NSIZE, TSIZE)
    compss_barrier()
    end_time = time.time()

    # Log results and time
    if __debug__:
        print("Post-process results")
    total_time = end_time - start_time
    init_time = seidel_start_time - start_time
    seidel_time = end_time - seidel_start_time

    print("RESULTS -----------------")
    print("VERSION AUTOPARALLEL")
    print("NSIZE " + str(NSIZE))
    print("TSIZE " + str(TSIZE))
    print("DEBUG " + str(__debug__))
    print("TOTAL_TIME " + str(total_time))
    print("INIT_TIME " + str(init_time))
    print("SEIDEL_TIME " + str(seidel_time))
    print("-------------------------")
