#!/usr/bin/python

# -*- coding: utf-8 -*-

# For better print formatting
from __future__ import print_function

# Imports
from pycompss.api.parallel import parallel
from pycompss.api.constraint import constraint
from pycompss.api.task import task
from pycompss.api.api import compss_barrier
from pycompss.api.api import compss_wait_on

import numpy as np


############################################
# MATRIX GENERATION
############################################

def initialize_variables(m_size, b_size):
    a = create_matrix(m_size, b_size, True)
    b = create_matrix(m_size, b_size, True)
    c = create_matrix(m_size, b_size, True)

    return a, b, c


def create_matrix(m_size, b_size, is_random):
    mat = []
    for i in range(m_size):
        mat.append([])
        for _ in range(m_size):
            mb = create_block(b_size, is_random)
            mat[i].append(mb)
    return mat


@constraint(ComputingUnits="${ComputingUnits}")
@task(returns=list)
def create_block(b_size, is_random):
    if is_random:
        import os
        np.random.seed(ord(os.urandom(1)))
        block = np.array(np.random.random((b_size, b_size)), dtype=np.float64, copy=False)
    else:
        block = np.array(np.zeros((b_size, b_size)), dtype=np.float64, copy=False)
    mb = np.matrix(block, dtype=np.float64, copy=False)
    return mb


############################################
# MAIN FUNCTION
############################################

# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *


@task(t3=IN, m_size=IN, t2=IN, beta=IN, c=INOUT)
def LT3(t3, m_size, t2, beta, c):
    for t4 in range(8 * t3, min(m_size - 1, 8 * t3 + 7) + 1):
        lbv = 8 * t2
        ubv = min(m_size - 1, 8 * t2 + 7)
        for t5 in range(8 * t2, min(m_size - 1, 8 * t2 + 7) + 1):
            c[t5 - 8 * t2][t4 - 8 * t3] = S1_no_task(c[t5 - 8 * t2][t4 - 8 * t3], beta)


@task(t3=IN, m_size=IN, t4=IN, t2=IN, alpha=IN, a=IN, b=IN, c=INOUT)
def LT4(t3, m_size, t4, t2, alpha, a, b, c):
    for t5 in range(8 * t3, min(m_size - 1, 8 * t3 + 7) + 1):
        lbp = 8 * t4
        ubp = min(m_size - 1, 8 * t4 + 7)
        for t6 in range(8 * t4, min(m_size - 1, 8 * t4 + 7) + 1):
            lbv = 8 * t2
            ubv = min(m_size - 1, 8 * t2 + 7)
            for t7 in range(8 * t2, min(m_size - 1, 8 * t2 + 7) + 1):
                c[t7 - 8 * t2][t5 - 8 * t3] = S2_no_task(c[t7 - 8 * t2][t5 - 8 * t3], alpha, a[t7 - 8 * t2][t6 - 8 *
                    t4], b[t6 - 8 * t4][t5 - 8 * t3])


@task(var2=IN, beta=IN, returns=1)
def S1(var2, beta):
    return scale(var2, beta)


def S1_no_task(var2, beta):
    return scale(var2, beta)


@task(var2=IN, alpha=IN, var3=IN, var4=IN, returns=1)
def S2(var2, alpha, var3, var4):
    return multiply(var2, alpha, var3, var4)


def S2_no_task(var2, alpha, var3, var4):
    return multiply(var2, alpha, var3, var4)


def matmul(a, b, c, m_size, alpha, beta):
    if __debug__:
        a = compss_wait_on(a)
        b = compss_wait_on(b)
        c = compss_wait_on(c)
        print('Matrix A:')
        print(a)
        print('Matrix B:')
        print(b)
        print('Matrix C:')
        print(c)
    if __debug__:
        import copy
        input_a = copy.deepcopy(a)
        input_b = copy.deepcopy(b)
        input_c = copy.deepcopy(c)
        res_expected = seq_multiply(input_a, input_b, input_c, m_size, alpha, beta)
    if m_size >= 1:
        lbp = 0
        ubp = int(math.floor(float(m_size - 1) / float(8)))
        for t2 in range(lbp, ubp + 1):
            lbp = 0
            ubp = int(math.floor(float(m_size - 1) / float(8)))
            for t3 in range(0, int(math.floor(float(m_size - 1) / float(8))) + 1):
                lbp = 8 * t3
                ubp = min(m_size - 1, 8 * t3 + 7)
                LT3_aux_0 = [[c[gv0][gv1] for gv1 in range(8 * t3, m_size if m_size >= 9 + 8 * t2 and -7 + m_size <=
                    8 * t3 <= m_size else 8 + 8 * t3 if m_size >= 9 + 8 * t2 and 8 * t3 <= -8 + m_size else m_size if
                    8 * t2 <= m_size <= 8 + 8 * t2 and -7 + m_size <= 8 * t3 <= m_size else 8 + 8 * t3, 1)] for gv0 in
                    range(8 * t2, 8 + 8 * t2 if m_size >= 9 + 8 * t2 and -7 + m_size <= 8 * t3 <= m_size else 8 + 8 *
                    t2 if m_size >= 9 + 8 * t2 and 8 * t3 <= -8 + m_size else m_size if 8 * t2 <= m_size <= 8 + 8 *
                    t2 and -7 + m_size <= 8 * t3 <= m_size else m_size, 1)]
                LT3(t3, m_size, t2, beta, LT3_aux_0)
        lbp = 0
        ubp = int(math.floor(float(m_size - 1) / float(8)))
        for t2 in range(lbp, ubp + 1):
            lbp = 0
            ubp = int(math.floor(float(m_size - 1) / float(8)))
            for t3 in range(0, int(math.floor(float(m_size - 1) / float(8))) + 1):
                lbp = 0
                ubp = int(math.floor(float(m_size - 1) / float(8)))
                for t4 in range(0, int(math.floor(float(m_size - 1) / float(8))) + 1):
                    lbp = 8 * t3
                    ubp = min(m_size - 1, 8 * t3 + 7)
                    LT4_aux_0 = [[a[gv0][gv1] for gv1 in range(8 * t4, m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and 
                        8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <= m_size else m_size if 8 * t4 <= m_size <=
                        8 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else m_size if 8 * t4 <=
                        m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size
                         else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and 8 *
                        t2 <= -8 + m_size else 8 + 8 * t4 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 + m_size and -7 +
                        m_size <= 8 * t2 <= m_size else 8 + 8 * t4 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 + m_size and
                        8 * t2 <= -8 + m_size else 8 + 8 * t4 if m_size >= 9 + 8 * t4 and -7 + m_size <= 8 * t3 <=
                        m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t4, 1)] for gv0 in range(8 * t2, 
                        m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <=
                        m_size else 8 + 8 * t2 if 8 * t4 <= m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 *
                        t2 <= -8 + m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <=
                        m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t2 if 8 * t4 <= m_size <= 8 + 8 * t4 and
                        -7 + m_size <= 8 * t3 <= m_size and 8 * t2 <= -8 + m_size else m_size if m_size >= 9 + 8 *
                        t4 and 8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t2 if m_size >=
                        9 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else m_size if m_size >= 9 + 
                        8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 *
                        t2, 1)]
                    LT4_aux_1 = [[b[gv0][gv1] for gv1 in range(8 * t3, 8 + 8 * t3 if 8 * t4 <= m_size <= 8 + 8 * t4 and
                        8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t3 if 8 * t4 <=
                        m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else m_size if 8 *
                        t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <=
                        m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and
                        8 * t2 <= -8 + m_size else 8 + 8 * t3 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 + m_size and 
                        -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t3 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 +
                        m_size and 8 * t2 <= -8 + m_size else m_size if m_size >= 9 + 8 * t4 and -7 + m_size <= 8 *
                        t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size else m_size, 1)] for gv0 in range(8 * t4, 
                        m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <=
                        m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <=
                        -8 + m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <=
                        m_size and -7 + m_size <= 8 * t2 <= m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and
                        -7 + m_size <= 8 * t3 <= m_size and 8 * t2 <= -8 + m_size else 8 + 8 * t4 if m_size >= 9 + 8 *
                        t4 and 8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t4 if m_size >=
                        9 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else 8 + 8 * t4 if m_size >= 
                        9 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 
                        8 * t4, 1)]
                    LT4_aux_2 = [[c[gv0][gv1] for gv1 in range(8 * t3, m_size if m_size >= 9 + 8 * t4 and -7 +
                        m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size else m_size if 8 * t4 <=
                        m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <= m_size
                         else 8 + 8 * t3 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <=
                        m_size else 8 + 8 * t3 if 8 * t4 <= m_size <= 8 + 8 * t4 and 8 * t3 <= -8 + m_size and -7 +
                        m_size <= 8 * t2 <= m_size else m_size if m_size >= 9 + 8 * t4 and -7 + m_size <= 8 * t3 <=
                        m_size and 8 * t2 <= -8 + m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 +
                        m_size <= 8 * t3 <= m_size and 8 * t2 <= -8 + m_size else 8 + 8 * t3 if m_size >= 9 + 8 * t4 and
                        8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else 8 + 8 * t3, 1)] for gv0 in range(8 * t2,
                        m_size if m_size >= 9 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and -7 + m_size <= 8 * t2 <=
                        m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and
                        -7 + m_size <= 8 * t2 <= m_size else m_size if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 +
                        m_size and -7 + m_size <= 8 * t2 <= m_size else m_size if 8 * t4 <= m_size <= 8 + 8 * t4 and
                        8 * t3 <= -8 + m_size and -7 + m_size <= 8 * t2 <= m_size else 8 + 8 * t2 if m_size >= 9 + 8 *
                        t4 and -7 + m_size <= 8 * t3 <= m_size and 8 * t2 <= -8 + m_size else 8 + 8 * t2 if 8 * t4 <=
                        m_size <= 8 + 8 * t4 and -7 + m_size <= 8 * t3 <= m_size and 8 * t2 <= -8 + m_size else 8 + 
                        8 * t2 if m_size >= 9 + 8 * t4 and 8 * t3 <= -8 + m_size and 8 * t2 <= -8 + m_size else 8 + 
                        8 * t2, 1)]
                    LT4(t3, m_size, t4, t2, alpha, LT4_aux_0, LT4_aux_1, LT4_aux_2)
    compss_barrier()
    if __debug__:
        c = compss_wait_on(c)
        print('New Matrix C:')
        print(c)
        print('Expected Matrix C:')
        print(res_expected)
    if __debug__:
        check_result(c, res_expected)

# [COMPSs Autoparallel] End Autogenerated code


############################################
# MATHEMATICAL FUNCTIONS
############################################

def scale(c, beta):
    # import time
    # start = time.time()

    return c * beta

    # end = time.time()
    # tm = end - start
    # print "TIME: " + str(tm*1000) + " ms"


def multiply(c, alpha, a, b):
    # import time
    # start = time.time()

    return c + alpha * np.dot(a, b)

    # end = time.time()
    # tm = end - start
    # print "TIME: " + str(tm*1000) + " ms"


############################################
# RESULT CHECK FUNCTIONS
############################################

def seq_multiply(a, b, c, m_size, alpha, beta):
    for i in range(m_size):
        for j in range(m_size):
            c[i][j] *= beta
        for k in range(m_size):
            for j in range(m_size):
                c[i][j] += alpha * np.dot(a[i][k], b[k][j])

    return c


def check_result(result, result_expected):
    is_ok = np.allclose(result, result_expected)
    print("Result check status: " + str(is_ok))

    if not is_ok:
        raise Exception("Result does not match expected result")


############################################
# MAIN
############################################

if __name__ == "__main__":
    # Import libraries
    import time

    # Parse arguments
    import sys

    args = sys.argv[1:]
    MSIZE = int(args[0])
    BSIZE = int(args[1])
    ALPHA = np.float64(1.5)
    BETA = np.float64(1.2)

    # Log arguments if required
    if __debug__:
        print("Running matmul application with:")
        print(" - MSIZE = " + str(MSIZE))
        print(" - BSIZE = " + str(BSIZE))

    # Initialize matrices
    if __debug__:
        print("Initializing matrices")
    start_time = time.time()
    A, B, C = initialize_variables(MSIZE/BSIZE, BSIZE)
    compss_barrier()

    # Begin computation
    if __debug__:
        print("Performing computation")
    mult_start_time = time.time()
    matmul(A, B, C, MSIZE, ALPHA, BETA)
    compss_barrier(True)
    end_time = time.time()

    # Log results and time
    if __debug__:
        print("Post-process results")
    total_time = end_time - start_time
    init_time = mult_start_time - start_time
    mult_time = end_time - mult_start_time

    print("RESULTS -----------------")
    print("VERSION AUTOPARALLEL")
    print("MSIZE " + str(MSIZE))
    print("BSIZE " + str(BSIZE))
    print("DEBUG " + str(__debug__))
    print("TOTAL_TIME " + str(total_time))
    print("INIT_TIME " + str(init_time))
    print("MULT_TIME " + str(mult_time))
    print("-------------------------")
