#!/usr/bin/python

# -*- coding: utf-8 -*-

# For better print formatting
from __future__ import print_function

#
# WRITE FILE
#
def writeFile(fileName, scops):
        with open(fileName, 'w') as f:
                write_file_header(f)
                for scop in scops:
                        scop.write(f)

def write_file_header(f):
        print("# [File generated by the OpenScop Library 0.9.1]", file = f)
        print("", file = f)

#
# GENERATE DUMMY TEST SCOP
#
def generateDummyScop():
        from scop_types.scop import Global, Statement, Extensions

        # Generate global
        from scop_types.scop.globl import Context, ContextType, Parameters
        from scop_types.scop.globl.parameters import Parameter
        context = Context(ContextType.CONTEXT, 0, 5, 0, 0, 0, 3)
        params = Parameters([Parameter("strings", "mSize kSize nSize")])
        g = Global("C", context, params)

        # Generate statements
        from scop_types.scop.statement import Relation, RelationType, StatementExtension
        s1_domain = Relation(RelationType.DOMAIN, 9, 8, 3, 0, 0, 3, [[1, 1], [1, -1]])
        s1_scattering = Relation(RelationType.SCATTERING, 7, 15, 7, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a1 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a2 = Relation(RelationType.WRITE, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a3 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a4 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_access = [s1_a1, s1_a2, s1_a3, s1_a4]
        s1_ext1 = StatementExtension(["i", "j", "k"], "c[i][j] += a[i][k]*b[k][j];")
        s1_extensions = [s1_ext1]
        s1 = Statement(s1_domain, s1_scattering, s1_access, s1_extensions)

        s2_domain = Relation(RelationType.DOMAIN, 9, 8, 3, 0, 0, 3, [[1, 1], [1, -1]])
        s2_scattering = Relation(RelationType.SCATTERING, 7, 15, 7, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a1 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a2 = Relation(RelationType.WRITE, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a3 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_access = [s2_a1, s2_a2, s2_a3]
        s2_ext1 = StatementExtension(["i", "j", "k"], "a[i][k] += b[i][k];")
        s2_extensions = [s2_ext1]
        s2 = Statement(s2_domain, s2_scattering, s2_access, s2_extensions)

        statements = [s1, s2]

        # Generate extensions
        from scop_types.scop.extensions import Scatnames, Arrays, Coordinates
        scatnames = Scatnames(["b0", "i", "b1", "j", "b2", "k", "b3"])
        arrays = Arrays(["i", "mSize", "j", "kSize", "k", "nSize", "c", "a", "b"])
        coordinates = Coordinates("example2_src_matmul.cc", 72, 0, 80, 0, 8)
        e = Extensions(scatnames, arrays, coordinates)

        # Generate SCOP
        from scop_types import Scop
        scop = Scop(g, statements, e)

        return scop


import unittest
class testConverter(unittest.TestCase):

        def test_empty(self):
                outFile = "converter_test_empty.out"

                # Generate scops from source file
                scops = []

                # Generate file
                writeFile(outFile, scops)

                # Check file content
                expected = "# [File generated by the OpenScop Library 0.9.1]\n\n"
                with open(outFile, 'r') as f:
                        content = f.read()
                self.assertEqual(content, expected)

                # Erase file
                import os
                os.remove(outFile)

        def test_dummy(self):
                # Generate dummy scops
                scop1 = generateDummyScop()
                scop2 = generateDummyScop()
                scops = [scop1, scop2]

                # Generate file
                outFile = "converter_test_dummy.out"
                writeFile(outFile, scops)

                # Check file content
                expected = "# [File generated by the OpenScop Library 0.9.1]\n\n<OpenScop>\n\n# =============================================== Global\n# Language\nC\n\n# Context\nCONTEXT\n0 5 0 0 0 3\n\n# Parameters are provided\n1\n<strings>\nmSize kSize nSize\n</strings>\n\n# Number of statements\n2\n\n# =============================================== Statement 1\n# Number of relations describing the statement:\n6\n\n# ----------------------------------------------  1.1 Domain\nDOMAIN\n9 8 3 0 0 3\n1\t1\t\n1\t-1\t\n\n# ----------------------------------------------  1.2 Scattering\nSCATTERING\n7 15 7 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  1.3 Access\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nWRITE\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  1.4 Statement Extensions\n# Number of Statement Extensions\n1\n<body>\n# Number of original iterators\n3\n# List of original iterators\ni j k \n# Statement body expression\nc[i][j] += a[i][k]*b[k][j];\n</body>\n\n# =============================================== Statement 2\n# Number of relations describing the statement:\n5\n\n# ----------------------------------------------  2.1 Domain\nDOMAIN\n9 8 3 0 0 3\n1\t1\t\n1\t-1\t\n\n# ----------------------------------------------  2.2 Scattering\nSCATTERING\n7 15 7 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  2.3 Access\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nWRITE\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  2.4 Statement Extensions\n# Number of Statement Extensions\n1\n<body>\n# Number of original iterators\n3\n# List of original iterators\ni j k \n# Statement body expression\na[i][k] += b[i][k];\n</body>\n\n# =============================================== Extensions\n<scatnames>\nb0 i b1 j b2 k b3 \n</scatnames>\n\n<arrays>\n# Number of arrays\n9\n# Mapping array-identifiers/array-names\n1 i\n2 mSize\n3 j\n4 kSize\n5 k\n6 nSize\n7 c\n8 a\n9 b\n</arrays>\n\n<coordinates>\n# File name\nexample2_src_matmul.cc\n# Starting line and column\n72 0\n# Ending line and column\n80 0\n# Identation\n8\n</coordinates>\n\n</OpenScop>\n\n<OpenScop>\n\n# =============================================== Global\n# Language\nC\n\n# Context\nCONTEXT\n0 5 0 0 0 3\n\n# Parameters are provided\n1\n<strings>\nmSize kSize nSize\n</strings>\n\n# Number of statements\n2\n\n# =============================================== Statement 1\n# Number of relations describing the statement:\n6\n\n# ----------------------------------------------  1.1 Domain\nDOMAIN\n9 8 3 0 0 3\n1\t1\t\n1\t-1\t\n\n# ----------------------------------------------  1.2 Scattering\nSCATTERING\n7 15 7 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  1.3 Access\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nWRITE\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  1.4 Statement Extensions\n# Number of Statement Extensions\n1\n<body>\n# Number of original iterators\n3\n# List of original iterators\ni j k \n# Statement body expression\nc[i][j] += a[i][k]*b[k][j];\n</body>\n\n# =============================================== Statement 2\n# Number of relations describing the statement:\n5\n\n# ----------------------------------------------  2.1 Domain\nDOMAIN\n9 8 3 0 0 3\n1\t1\t\n1\t-1\t\n\n# ----------------------------------------------  2.2 Scattering\nSCATTERING\n7 15 7 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  2.3 Access\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nWRITE\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\nREAD\n3 11 3 3 0 3\n0\t-1\t\n0\t0\t\n\n# ----------------------------------------------  2.4 Statement Extensions\n# Number of Statement Extensions\n1\n<body>\n# Number of original iterators\n3\n# List of original iterators\ni j k \n# Statement body expression\na[i][k] += b[i][k];\n</body>\n\n# =============================================== Extensions\n<scatnames>\nb0 i b1 j b2 k b3 \n</scatnames>\n\n<arrays>\n# Number of arrays\n9\n# Mapping array-identifiers/array-names\n1 i\n2 mSize\n3 j\n4 kSize\n5 k\n6 nSize\n7 c\n8 a\n9 b\n</arrays>\n\n<coordinates>\n# File name\nexample2_src_matmul.cc\n# Starting line and column\n72 0\n# Ending line and column\n80 0\n# Identation\n8\n</coordinates>\n\n</OpenScop>\n\n"
                with open(outFile, 'r') as f:
                        content = f.read()
                self.assertEqual(content, expected)

                # Erase file
                import os
                os.remove(outFile)

        def test_matmul(self):
                srcFile = "example3_src_matmul.py"
                outFile = "out3_matmul.scop"
                
                # Generate scops from source file
                scops = []

                # Generate file
                writeFile(outFile, scops)

                # Check file content
                expected = "# [File generated by the OpenScop Library 0.9.1]\n\n"
                with open(outFile, 'r') as f:
                        content = f.read()
                self.assertEqual(content, expected)

                # Erase file
                import os
                os.remove(outFile)


if __name__ == '__main__':
        unittest.main()

