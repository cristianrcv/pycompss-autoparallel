#!/usr/bin/python

# -*- coding: utf-8 -*-

# For better print formatting
from __future__ import print_function


#
# WRITE FILE
#
def writeFile(fileName, scops):
        with open(fileName, 'w') as f:
                write_file_header(f)
                for scop in scops:
                        scop.write(f)

def write_file_header(f):
        print("# [File generated by the OpenScop Library 0.9.1]", file = f)
        print("", file = f)


#
# READ FILE
#
def readFile(fileName):
        from scop_types.scop import Global, Statement, Extensions

        # Generate global
        from scop_types.scop.globl import Context, ContextType, Parameters
        from scop_types.scop.globl.parameters import Parameter
        context = Context(ContextType.CONTEXT, 0, 5, 0, 0, 0, 3)
        params = Parameters([Parameter("strings", "mSize kSize nSize")])
        g = Global("C", context, params)

        # Generate statements
        from scop_types.scop.statement import Relation, RelationType, StatementExtension
        s1_domain = Relation(RelationType.DOMAIN, 9, 8, 3, 0, 0, 3, [[1, 1], [1, -1]])
        s1_scattering = Relation(RelationType.SCATTERING, 7, 15, 7, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a1 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a2 = Relation(RelationType.WRITE, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a3 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_a4 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s1_access = [s1_a1, s1_a2, s1_a3, s1_a4]
        s1_ext1 = StatementExtension(["i", "j", "k"], "c[i][j] += a[i][k]*b[k][j];")
        s1_extensions = [s1_ext1]
        s1 = Statement(s1_domain, s1_scattering, s1_access, s1_extensions)

        s2_domain = Relation(RelationType.DOMAIN, 9, 8, 3, 0, 0, 3, [[1, 1], [1, -1]])
        s2_scattering = Relation(RelationType.SCATTERING, 7, 15, 7, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a1 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a2 = Relation(RelationType.WRITE, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_a3 = Relation(RelationType.READ, 3, 11, 3, 3, 0, 3, [[0, -1], [0, 0]])
        s2_access = [s2_a1, s2_a2, s2_a3]
        s2_ext1 = StatementExtension(["i", "j", "k"], "a[i][k] += b[i][k];")
        s2_extensions = [s2_ext1]
        s2 = Statement(s2_domain, s2_scattering, s2_access, s2_extensions)

        statements = [s1, s2]

        # Generate extensions
        from scop_types.scop.extensions import Scatnames, Arrays, Coordinates
        scatnames = Scatnames(["b0", "i", "b1", "j", "b2", "k", "b3"])
        arrays = Arrays(["i", "mSize", "j", "kSize", "k", "nSize", "c", "a", "b"])
        coordinates = Coordinates("example2_src_matmul.cc", 72, 0, 80, 0, 8)
        e = Extensions(scatnames, arrays, coordinates)

        # Generate SCOP
        from scop_types import Scop
        scop = Scop(g, statements, e)

        return [scop]

#
# TRANSLATOR
#
def translate(srcFile, outFile):
        # Generate scops from source file
        scops = readFile(srcFile)

        # Generate file
        writeFile(outFile, scops)


#
# UNIT TESTS
#
import unittest
class testTranslator(unittest.TestCase):

        def test_matmul(self):
                srcFile = "./tests/test1_matmul.src.scop"
                expectedFile="./tests/test1_matmul.expected.python"
                outFile = "./tests/test1_matmul.out.python"
 
                # Translate
                translate(srcFile, outFile)
               
                # Check file content
                with open(expectedFile, 'r') as f:
                        expectedContent = f.read()
                with open(outFile, 'r') as f:
                        outContent = f.read()
                self.assertEqual(outContent, expectedContent)

                # Erase file
                import os
                os.remove(outFile)


#
# MAIN
#
if __name__ == '__main__':
        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument('-i', '--input', help = "Input file containing python code")
        parser.add_argument('-o', '--output', help = "Output file written in SCOP format")
        args = parser.parse_args()

        if args.input and args.output:
                translate(args.input, args.output)
        elif args.input or args.output:
                print("ERROR: Invalid arguments.")
                print(" - Add input and output parameters to invoke the main class")
                print(" - Add no arguments to invoke unit tests")
                print("Aborting...")
        else:
                # Test mode
                print("PERFORMING ALL TESTS")
                unittest.main()

