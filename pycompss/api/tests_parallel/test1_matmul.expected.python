#!/usr/bin/python

# -*- coding: utf-8 -*-

# Imports
# from pycompss.api.parallel import parallel


# Initializes a matrix with size (n x m) with blocks (bSize x bSize) randomly or not
def initialize(n_size, m_size, b_size, random):
    import numpy as np

    matrix = []
    for i in range(n_size):
        matrix.append([])
        for _ in range(m_size):
            if random:
                block = np.array(np.random.random((b_size, b_size)), dtype=np.double, copy=False)
            else:
                block = np.array(np.zeros((b_size, b_size)), dtype=np.double, copy=False)
            mb = np.matrix(block, dtype=np.double, copy=False)
            matrix[i].append(mb)
    return matrix


# Performs the matrix multiplication by blocks
# @parallel()
# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *


@task(var2=IN, var3=IN, var1=INOUT)
def S1(var2, var3, var1):
    var1 += var2 * var3


def matmul(m_size, n_size, k_size, b_size, debug):
    a = initialize(m_size, n_size, b_size, True)
    b = initialize(n_size, k_size, b_size, True)
    c = initialize(m_size, k_size, b_size, False)
    if debug:
        print 'Matrix A:'
        print a
        print 'Matrix B:'
        print b
        print 'Matrix C:'
        print c
    if k_size >= 1 and m_size >= 1 and n_size >= 1:
        lbp = 0
        ubp = k_size - 1
        for t1 in range(lbp, ubp + 1):
            lbp = 0
            ubp = n_size - 1
            for t2 in range(0, n_size - 1 + 1):
                lbv = 0
                ubv = m_size - 1
                for t3 in range(lbv, ubv + 1):
                    S1(a[t3][t2], b[t2][t1], c[t3][t1])
    compss_barrier()
    if debug:
        print 'Matrix C:'
        print c
    return c

# [COMPSs Autoparallel] End Autogenerated code


# MAIN CODE
if __name__ == "__main__":
    # Import libraries
    import time

    # Parse arguments
    m_mat_size = 5
    n_mat_size = 2
    k_mat_size = 3
    block_size = 1
    is_debug = True

    # Begin computation
    startTime = time.time()
    result = matmul(m_mat_size, n_mat_size, k_mat_size, block_size, is_debug)
    endTime = time.time()

    # Log results and time
    total_time = endTime - startTime
    print("TOTAL_TIME " + str(total_time))
