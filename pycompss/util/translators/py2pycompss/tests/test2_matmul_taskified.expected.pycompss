# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *
from pycompss.util.translators.arg_utils.arg_utils import ArgUtils


@task(lbv=IN, ubv=IN, returns=list)
def LT2(lbv, ubv, *args):
    var1, var2, var3 = ArgUtils.rebuild_args(args)
    for t3 in range(0, ubv + 1 - lbv):
        S1(var1[t3], var2[t3], var3[t3])
    return ArgUtils.flatten_args(var1, var2, var3)


def S1(var2, var3, var1):
    var1 += var2 * var3


def matmul(m_size, n_size, k_size, b_size, debug):
    a = initialize(m_size, n_size, b_size, True)
    b = initialize(n_size, k_size, b_size, True)
    c = initialize(m_size, k_size, b_size, False)
    if debug:
        print 'Matrix A:'
        print a
        print 'Matrix B:'
        print b
        print 'Matrix C:'
        print c
    if k_size >= 1 and m_size >= 1 and n_size >= 1:
        lbp = 1
        ubp = k_size - 1 + 1
        for t1 in range(lbp, ubp + 1):
            lbp = 1
            ubp = n_size - 1 + 1
            for t2 in range(1, n_size - 1 + 1):
                lbv = 1
                ubv = m_size - 1 + 1
                [a[t3 - 1][t2 - 1] for t3 in range(lbv, ubv + 1)], [b[t2 - 
                    1][t1 - 1] for t3 in range(lbv, ubv + 1)], [c[t3][t1] for
                    t3 in range(lbv, ubv + 1)] = ArgUtils.rebuild_args(
                    compss_wait_on(LT2(lbv, ubv, *ArgUtils.flatten_args([a[
                    t3 - 1][t2 - 1] for t3 in range(lbv, ubv + 1)], [b[t2 -
                    1][t1 - 1] for t3 in range(lbv, ubv + 1)], [c[t3][t1] for
                    t3 in range(lbv, ubv + 1)]))))
    compss_barrier()
    if debug:
        print 'Matrix C:'
        print c
    return c

# [COMPSs Autoparallel] End Autogenerated code
