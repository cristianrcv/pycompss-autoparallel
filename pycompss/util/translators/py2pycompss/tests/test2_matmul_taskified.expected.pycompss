# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *
from pycompss.util.translators.arg_utils.arg_utils import ArgUtils


@task(lbv=IN, ubv=IN, returns="LT2_args_size")
def LT2(lbv, ubv, *args):
    global LT2_args_size
    var1, var2, var3 = ArgUtils.rebuild_args(args)
    for t3 in range(0, ubv + 1 - lbv):
        S1_no_task(var1[t3], var2[t3], var3[t3])
    return ArgUtils.flatten_args(var3)


@task(var2=IN, var3=IN, var1=INOUT)
def S1(var2, var3, var1):
    var1 += var2 * var3


def S1_no_task(var2, var3, var1):
    var1 += var2 * var3


def matmul(m_size, n_size, k_size, b_size, debug):
    a = initialize(m_size, n_size, b_size, True)
    b = initialize(n_size, k_size, b_size, True)
    c = initialize(m_size, k_size, b_size, False)
    if debug:
        print 'Matrix A:'
        print a
        print 'Matrix B:'
        print b
        print 'Matrix C:'
        print c
    if k_size >= 1 and m_size >= 1 and n_size >= 1:
        lbp = 1
        ubp = k_size - 1 + 1
        for t1 in range(lbp, ubp + 1):
            lbp = 1
            ubp = n_size - 1 + 1
            for t2 in range(1, n_size - 1 + 1):
                lbv = 1
                ubv = m_size - 1 + 1
                LT2_aux_0 = [a[t3 - 1][t2 - 1] for t3 in range(lbv, ubv + 1)]
                LT2_aux_1 = [b[t2 - 1][t1 - 1] for t3 in range(lbv, ubv + 1)]
                LT2_aux_2 = [c[t3][t1] for t3 in range(lbv, ubv + 1)]
                LT2_argutils = ArgUtils()
                global LT2_args_size
                LT2_flat_args, LT2_args_size = LT2_argutils.flatten(3, LT2_aux_0, LT2_aux_1, LT2_aux_2, LT2_aux_2)
                LT2_new_args = LT2(lbv, ubv, *LT2_flat_args)
                LT2_aux_2, = LT2_argutils.rebuild(LT2_new_args)
                LT2_index = 0
                for t3 in range(lbv, ubv + 1):
                    c[t3][t1] = LT2_aux_2[LT2_index]
                    LT2_index = LT2_index + 1
    compss_barrier()
    if debug:
        print 'Matrix C:'
        print c
    return c

# [COMPSs Autoparallel] End Autogenerated code
