# [COMPSs Autoparallel] Begin Autogenerated code
import math

from pycompss.api.api import compss_barrier, compss_wait_on, compss_open
from pycompss.api.task import task
from pycompss.api.parameter import *
from pycompss.util.translators.arg_utils.arg_utils import ArgUtils


@task(t1=IN, a=IN, t2=IN, b=IN, ubv=IN, lbv=IN, c=INOUT, d=INOUT, returns="LT4_args_size")
def LT4(t1, t2, ubv, lbv, *args):
    global LT4_args_size
    a, b, c, d = ArgUtils.rebuild_args(args)
    for t3 in range(lbv, ubv + 1):
        c[t3 - lbv][t1 - t1] = S1_no_task(c[t3 - lbv][t1 - t1], a[t3 - lbv][t2 - t2], b[t2 - t2][t1 - t1])
        S2_no_task(c[t3 - lbv][t1 - t1], a[t3 - lbv][t2 - t2], b[t2 - t2][t1 - t1])
        c[t3 - lbv][t1 - t1], d[t3 - lbv][t1 - t1] = S3_no_task(c[t3 - lbv][t1 - t1], a[t3 - lbv][t2 - t2], b[t2 -
            t2][t1 - t1])
    return ArgUtils.flatten_args(c, d)


@task(var2=IN, var3=IN, var4=IN, returns=1)
def S1(var2, var3, var4):
    return multiply(var2, var3, var4)


def S1_no_task(var2, var3, var4):
    return multiply(var2, var3, var4)


@task(var1=IN, var2=IN, var3=IN)
def S2(var1, var2, var3):
    multiply(var1, var2, var3)


def S2_no_task(var1, var2, var3):
    multiply(var1, var2, var3)


@task(var3=IN, var4=IN, var5=IN, returns=2)
def S3(var3, var4, var5):
    return multiply(var3, var4, var5)


def S3_no_task(var3, var4, var5):
    return multiply(var3, var4, var5)


def matmul(m_size, n_size, k_size, b_size, debug):
    a = initialize(m_size, n_size, b_size, True)
    b = initialize(n_size, k_size, b_size, True)
    c = initialize(m_size, k_size, b_size, False)
    d = initialize(m_size, k_size, b_size, False)
    if debug:
        print 'Matrix A:'
        print a
        print 'Matrix B:'
        print b
        print 'Matrix C:'
        print c
    if k_size >= 1 and m_size >= 1 and n_size >= 1:
        lbp = 0
        ubp = k_size - 1
        for t1 in range(lbp, ubp + 1):
            lbp = 0
            ubp = n_size - 1
            for t2 in range(0, n_size - 1 + 1):
                lbv = 0
                ubv = m_size - 1
                LT4_aux_0 = [[a[gv0][gv1] for gv1 in range(t2, t2 + 1, 1)] for gv0 in range(lbv, 1 + ubv, 1)]
                LT4_aux_1 = [[b[gv0][gv1] for gv1 in range(t1, t1 + 1, 1)] for gv0 in range(t2, t2 + 1, 1)]
                LT4_aux_2 = [[c[gv0][gv1] for gv1 in range(t1, t1 + 1, 1)] for gv0 in range(lbv, 1 + ubv, 1)]
                LT4_aux_3 = [[d[gv0][gv1] for gv1 in range(t1, t1 + 1, 1)] for gv0 in range(lbv, 1 + ubv, 1)]
                LT4_argutils = ArgUtils()
                global LT4_args_size
                LT4_flat_args, LT4_args_size = LT4_argutils.flatten(4, LT4_aux_0, LT4_aux_1, LT4_aux_2, LT4_aux_3,
                    LT4_aux_2, LT4_aux_3)
                LT4_new_args = LT4(t1, t2, ubv, lbv, *LT4_flat_args)
                LT4_aux_2, LT4_aux_3 = LT4_argutils.rebuild(LT4_new_args)
                for gv0 in range(lbv, 1 + ubv, 1):
                    for gv1 in range(t2, t2 + 1, 1):
                        a[gv0][gv1] = LT4_aux_0[gv0 - lbv][gv1 - t2]
                for gv0 in range(t2, t2 + 1, 1):
                    for gv1 in range(t1, t1 + 1, 1):
                        b[gv0][gv1] = LT4_aux_1[gv0 - t2][gv1 - t1]
                for gv0 in range(lbv, 1 + ubv, 1):
                    for gv1 in range(t1, t1 + 1, 1):
                        c[gv0][gv1] = LT4_aux_2[gv0 - lbv][gv1 - t1]
                for gv0 in range(lbv, 1 + ubv, 1):
                    for gv1 in range(t1, t1 + 1, 1):
                        d[gv0][gv1] = LT4_aux_3[gv0 - lbv][gv1 - t1]
    compss_barrier()
    if debug:
        print 'Matrix C:'
        print c
    return c

# [COMPSs Autoparallel] End Autogenerated code
